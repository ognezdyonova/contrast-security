import Login_page_controller from "../pages/controllers/Login_page_controller";
import Dashboard_page_controller from "../pages/controllers/Dashboard_page_controller";
import Vulnerabilities_page_controller from "../pages/controllers/Vulnerabilities_page_controller";

describe('Adds a tag to vulnerability', () => {
    before(() => {
        Cypress.Cookies.debug(true);
        // cy.clearLocalStorage();
        // cy.clearCookies();
        cy.visit(Cypress.env("WEB_BASE_URL"));
        cy.on('uncaught:exception', (err) => {
            expect(err.message).to.include('The following error originated from your application code');
            return false;
        });
    })

    beforeEach(() => {
        Cypress.Cookies.preserveOnce(
            'XSRF-TOKEN',
            'contrast_ui_key',
            'driftt_aid',
            'JSESSIONID');
    })

    it('Login user', () => {
        
        let login_page = new Login_page_controller();
        login_page.elements.logo_image().should("be.visible");
        login_page.elements.title_label().should("be.visible");
        login_page.elements.login_input().should("be.visible");
        login_page.elements.next_button().should("be.visible");
        login_page.elements.forgot_link().should("be.visible");

        login_page.login_user(Cypress.env("USER_LOGIN"), Cypress.env("USER_PASS"))
    });

    it("Dashboard elements", () => {
        let dashboard = new Dashboard_page_controller();
        dashboard.elements.logo_image().should("be.visible");
        dashboard.elements.header_buttons().should("be.visible");
        dashboard.elements.search_input().should("be.visible");
        dashboard.elements.add_new_agent().should("be.visible");

        cy.on('uncaught:exception', (err) => {
            expect(err.message).to.include('The following error originated from your application code');
            return false;
        });
    });

    context("Console errors when user adds a tag to vulnerability", function () {
        beforeEach(() => {
            Cypress.Cookies.preserveOnce(
                'XSRF-TOKEN',
                'contrast_ui_key',
                'driftt_aid',
                'JSESSIONID');
        })

        it('Open vulnerability page', () => {
            let dashboard = new Dashboard_page_controller();
            dashboard.elements.header_buttons()
                .contains('Vulnerabilities')
                .should("be.visible")
                .click();

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });

            let vulnerability_page = new Vulnerabilities_page_controller();
            vulnerability_page.elements.header_page().should("be.visible");
            vulnerability_page.elements.search_icon().should("be.visible");
            vulnerability_page.elements.items_of_list().should("be.visible");
        });

        it("Add new tag", () => {
            let vulnerability_page = new Vulnerabilities_page_controller();
            vulnerability_page.elements.items_of_list()
                .first()
                .should("be.visible")
                .trigger('mouseover');

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });


            vulnerability_page.elements.send_test_id_button().should("be.visible");
            vulnerability_page.elements.delete_item().should("be.visible");
            vulnerability_page.elements.add_tag_to_item_button()
                .first()
                .should("be.visible")
                .click({force: true});

            vulnerability_page.add_tag_modal
                .title().should("be.visible")
                .should("contain.text", 'Tag Vulnerability');

            vulnerability_page.add_tag_modal.input_tag()
                .should("be.visible")
                .type("TestTAg11111")
                .type('{enter}');

            vulnerability_page.add_tag_modal.title()
                .should("be.visible")
                .click({force: true});

            vulnerability_page.add_tag_modal.save_form_btn()
                .should("be.visible")
                .click()

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });

            vulnerability_page.add_tag_modal
                .title().should("not.be.visible");


            let new_vulnerability_page = new Vulnerabilities_page_controller();
            new_vulnerability_page.elements.items_of_list()
                .first()
                .should("be.visible")
                .should("contain.text", 'TestTAg11111')
        });

        it("Add dublicate tag", () => {
            let vulnerability_page = new Vulnerabilities_page_controller();
            vulnerability_page.elements.items_of_list()
                .first()
                .should("be.visible")
                .trigger('mouseover');

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });

            vulnerability_page.elements.send_test_id_button().should("be.visible");
            vulnerability_page.elements.delete_item().should("be.visible");
            vulnerability_page.elements.add_tag_to_item_button()
                .first()
                .should("be.visible")
                .click({force: true});

            vulnerability_page.add_tag_modal
                .title().should("be.visible")
                .should("contain.text", 'Tag Vulnerability');

            vulnerability_page.add_tag_modal.input_tag()
                .should("be.visible")
                .type("TestTAg11111")
                .type('{enter}');

            vulnerability_page.add_tag_modal
                .ready_tags()
                .should("be.visible")
                .contains('TestTAg11111')
                .then(($r) => {
                    expect($r).to.have.length(1);
                });

            vulnerability_page.add_tag_modal.title()
                .should("be.visible")
                .click({force: true});

            vulnerability_page.add_tag_modal.save_form_btn()
                .should("be.visible")
                .click()

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });

            vulnerability_page.add_tag_modal
                .title().should("not.be.visible");


            let new_vulnerability_page = new Vulnerabilities_page_controller();
            new_vulnerability_page.elements.items_of_list()
                .first()
                .should("be.visible")
                .should("contain.text", 'TestTAg11111')
        });

        it("Filtering by tag", () => {
            let vulnerability_page = new Vulnerabilities_page_controller();
            
            vulnerability_page.elements.filter_button()
            .scrollIntoView()
            .should("be.visible")
            .click({force: true});
            cy.on('uncaught:exception', (err) => {
            expect(err.message).to.include('The following error originated from your application code');
            return false;
            });
            
            vulnerability_page.elements
            .filter_by("TestTAg11111")
            .click({force: true});
            
            cy.on('uncaught:exception', (err) => {
            expect(err.message).to.include('The following error originated from your application code');
            return false;
            });
            
            vulnerability_page.elements.title()
            .scrollIntoView()
            .should("be.visible")
            .should("contain.text", 'Vulnerabilities')
            .click({force: true});
            
            cy.on('uncaught:exception', (err) => {
            expect(err.message).to.include('The following error originated from your application code');
            return false;
            });
            
            vulnerability_page.elements
            .clearLink()
            .should("be.visible");
            
            vulnerability_page.elements.items_of_list()
            .should("have.length", 1);
            
            vulnerability_page.elements.items_of_list()
            .should("contain.text", 'TestTAg11111');
            
            
        });
            
        it("Clear filters", () => {
            let vulnerability_page = new Vulnerabilities_page_controller();
            vulnerability_page.elements
            .clearLink()
            .should("be.visible")
            .click({force: true});
            
            cy.on('uncaught:exception', (err) => {
            expect(err.message).to.include('The following error originated from your application code');
            return false;
            });
            
            vulnerability_page.elements
            .clearLink()
            .should("not.be.visible");
            
            vulnerability_page.elements.items_of_list()
            .should("not.have.length", 1);
            
        });

        it("Remove tag", () => {
            let vulnerability_page = new Vulnerabilities_page_controller();
            vulnerability_page.elements.items_of_list()
                .first()
                .should("be.visible")
                .trigger('mouseover');

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });

            vulnerability_page.elements.send_test_id_button().should("be.visible");
            vulnerability_page.elements.delete_item().should("be.visible");
            vulnerability_page.elements.add_tag_to_item_button()
                .first()
                .should("be.visible")
                .click({force: true});

            vulnerability_page.add_tag_modal
                .title().should("be.visible")
                .should("contain.text", 'Tag Vulnerability');

            vulnerability_page.add_tag_modal
                .ready_tags()
                .contains('TestTAg11111')
                .should("be.visible");


            vulnerability_page.add_tag_modal
                .remove_ready_tag().last().click({force: true})

            vulnerability_page.add_tag_modal
                .ready_tags()
                .should("not.contain.text", 'TestTAg11111');

            vulnerability_page.add_tag_modal.save_form_btn()
                .should("be.visible")
                .click()

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });

            vulnerability_page.add_tag_modal
                .title().should("not.be.visible");


            let new_vulnerability_page = new Vulnerabilities_page_controller();
            new_vulnerability_page.elements.items_of_list()
                .first()
                .should("be.visible")
                .should("not.contain.text", 'TestTAg11111')
        });
    })

    context('Log out', function () {
        beforeEach(() => {
            Cypress.Cookies.preserveOnce(
                'XSRF-TOKEN',
                'contrast_ui_key',
                'driftt_aid',
                'JSESSIONID');
        })

        it("Log out", () => {
            let vulnerability_page = new Vulnerabilities_page_controller();
            vulnerability_page.header.user_link()
                .should("be.visible")
                .click({force:true});
            vulnerability_page.header.user_menu_settings_link()
                .should("be.visible");
            vulnerability_page.header.user_menu_settings_link()
                .contains('Log out')
                .should("be.visible")
                .click({force:true});

            cy.on('uncaught:exception', (err) => {
                expect(err.message).to.include('The following error originated from your application code');
                return false;
            });

            vulnerability_page.header.user_menu_settings_link()
                .should("not.be.visible");
            cy.get('.error-message-text')
                .should("contain.text", 'See you next time!');
            cy.get('.error-message-subtext')
                .should("contain.text", 'Thanks for using Contrast.');
            cy.get('.btn').should("be.visible");
        });
    })

})
